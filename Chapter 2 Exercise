Exercises Section 2.1.1
//Ex 2.1
//What are the differences between int, long, long long, and short? 
//Between an unsigned and a signed type?
//Between a float and double?

Answer:
1.The differences between int, long, long long, and short is their their size of bits.
2. A signed type represents negatve or positive numbers and unsigned represent only the values greater than or equal to zero. 
3. They were all floating-point types represent single (floatï¼‰ and double precision values. Float represent in one words(32 bits) and double represent (64 bits)

//Ex 2.2
//To calculate a mortgage payment, what types would use for the rate, principal, and payment? Explain why you selected each type.
//I would choose the types with the floating point, such as float, double, and long double.
//However, personaly I would like to used double for the rate, principal, and payment, because float doesn't hav enough precision, and double-precision could be faster than single. The long double one is unneccsary because it could too long to run.

Exercises Section 2.1.2
//Ex 2.3-4
//What output will the following code produce?
//Write a program to check whether your predictions were correct. If not, study this section until you understand what the problem is?
unsigned u = 10, u2 = 42;
std :: cout << u2 - u << std :: endl; //Hypothesis : It will print out the value 32
std :: cout << u - u2 << std :: endl; //Hypothesis : since u is smaller than u2, and unsigned type can't smaller than 0, so it would positive value, it will wrap around.

int i = 10, i2 = 42;
std :: cout << i2 - i << std :: endl; //Hypothesis : 32
std :: cout << i - i2 << std :: endl; //Hypothesis : -32

std :: cout << i - u << std :: endl; //Hypothesis : It would be zero
std :: cout << u - i << std :: endl; //Hypothesis : It's going be zero



Exercises Section 2.1.3
//Ex 2.5
//Determine the type of each of the following literals. Explain the differences among the literals in each of the four examples.
a. 'a', L'a', "a", L"a"
Answer, char, wide char, string, wide string

b. 10, 10u, 10L, 10uL, 012, 0xC
Answer, int, unsigned int, long int, binary 1010,, int, 0xC Decimal 12

c. 3.14, 3.14f, 3.14L
Answer: double, floating point, Long double

d.10, 10u, 10., 10e-2
Answer : int, unsigned int, double, double (10 * 10^-2) = 10/100

//Ex 2.6
//What, if any, are the differences between the following definitions:
//Those Integers literal begin with 0 are interpreted as octal. 0x are interpreted as hexadecimal.

20 / * decimal * / 024 /* octal */ 0x14 // hexadecimal */

int month = 9, day = 7
int month = 09, day = 07;

//If you write 0, there will be octal, and octal only have digits from 00 - 07

//Ex 2,7
//What values do these literals represent?
//What types does each have?
a. "Who goes with F\145rgus?\012"
Answer : String, \145 substituted with char(255-145), \012 isngle newline
b. 3.14e1L
Answer : long double
c. 1024f
Answer : Float point
d. 3.14L 
Answr : Long double

//Ex 2.8
//Using escape sequences, wirte a program to print 2M followed by a newline. Modify the program to print 2, then a tab, then an M, followed by a newLine.

std :: cout << 2 << "\t" << "M" << "\n" << std :: endl;

Exercises Section 2.2.1
//Ex 2.9
//Explain the following definitions. For those tha are illegal, explain what's wrong and how to correct it.
a. std LL cin >> int input_value;
Answer :: Need to be initalize first, the input_value need to be set equal 0.

b. int i = {3.14};
Answer :: This is not an array, if you want to have an integer array, you need to add the braces behind i, like int i [] = {3.14};

c. double salary wage = 9999.99;
Answer : The expression way is incorrect, you could either correct in two ways.
1. double salary = 9999.99, wages = 9999.99;
2. double salary = 9999.99;
   double wages = salary;
   
d. int i = 3.14;
Answer : integer don't have any floating point, if you initalize i to 3.14, the compiler will auto-correct into 3.
//Use double type

Exercise 2.10
//What are the inital values, if any, of each the following variables.
std :: string global_str;
int global_int;
int main()
{
  int local_int;
  std :: string local_str;
}

Answer : The default initalizer for string is empty.

Exercises Section 2.2.2
//Ex 2.11
//Explain whether each of the following is a declaration or a definition;

  (a) extern int ix = 1024;
Answer : declare ix = 1024, but it's error to provide an initialzer on an extern inside a function.

  (b) int iy; 
Answer : declare and define iy;

 (c) extern int iz;
Answer : declare but didn't define iz;

Exercise Section 2.2.3
//Ex 2.12
//Which, if any, of the following names are invalid?
(a) int double = 3.14 //invalid

(b) int _; 

(c) int catch-22 // invalid, can't have a upper underscore

(d) int 1_or_2 = 1; // invalid, can't have more than one lower underscore(_)
 
(e) double Double = 3.14 // invalid.
 
Exercise Section 2.2.4
//Ex. 2.13
//What is the value of j in the following program?

int i = 42;
int main()
{
  int i = 100;
  int j = i;
}

Answer : J = 100;

//Ex 2.14
//Is the following program legal? If so, what values are printed?

int i = 100, sum = 0;
for (int i = 0; i != 10; ++i)
  sum += i;
std :: cout << i << " " << sum << std :: endl;

Hypothesis : It doesn't seem legal, i has already initalized in the first place, and the for loop i have the same name.
Answer : It is possible, because the inner scope in the for loop won't affect the outer scope.

Exercises Section 2.3.1
//Ex 2.15
//Which of the following definitions, if any, are invalid? why?
(a) int ival = 1.01;
a: Declare and define ival equal 1.01;

(b) int &rval1 = 1.01;
a: the references of rval = 1.01;

(c) int &rval2 = ival;
a: the references of rval2 is a references of ival;

(d) int &rval3; 
a :: error, references must be initialized 

//Ex 2.16
//Which, if any, of the following assignments are invalid ? If they are invalid, explain what they do

int i = 0, &r1 = i; double d = 0, &r2 = d;

a. r2 = 3.14159;

b. r2 = r1; // Error : Initializer must be an double object

c. i = r2; // Error : integer can't refer to a double referenc

d. r1 = d; r1 can only hold integer reference

//Ex 2.17
//What does the following code print?

int i, &ri = i;
i = 5; ri = 10;
std :: cout << i << " " << ri << std :: endl;

Hypothesis : Print out i = 5, and ri = 10.
Answer : Print out i = 10, and ri = 10, ri is the reference of i, once ri changed, i will changed, therefore when ri = 10, i = 10.

Exercises Section 2.3.2
//Ex 2.18
//Write code to change the value of a pointer. Write a code to change the value to which the pointer points.

 #include <iostream>
using namespace std;


int main()
{

    int ival = 0; // ival initialize is zero;

    int *p = NULL; // Null pointer, point to no object

    p = &ival; // P is the pointer of ival

    std :: cout << ival  << std :: endl;

    *p = 6; // Changed P is the pointer of 6;

    std :: cout << ival << std :: endl;

  return 0;
}

//Ex 2.19
//Explain the key differences between pointers and references.

Answer : Pointer is kind like references, pointers are used for indirect access to other object.
         Unlike a references, a pointer is an object in its own right. 
         Pointer can be assigned and copied. Also can be unitialized when its definied.
         
//Ex 2.20
//What does the following program do?

int i = 42; // Initalized and define i = 42;
int *p1 = &i; // p1 is the pointer that holds the address of i
*p1 = *p1 * *p1; // Multiplying the value, which the references holds, and the pointer holds the references.

//Ex 2.21
//Explain each of the following definitions. Indicate whether any are illegal and, if so, why.

int i = 0;

(a). double* dp = &i; //The pointer type is double, it can't hold a integer references address.

(b). int *ip = i; // Can't assign an int to a

(c) int *p = &i; // The pointer p is initialized and hold the address of i.

//Ex 2.22
//Assuming p is a pointer to int, explain the following code;

if (p) // ....
Answer : If p is already the point to int, which the if statement is checking either p is a pointer and has a value
if (*p) // ....
Answer : If *p is a pointer of a pointer.

//Ex 2.23
//Given a pointer p, can you determine whether p points to a valid object? If so, how? If not. why not?

Answer : Simple, using the previous example but check the condition is not Null, if (p) is not null, then the condiiton is true, else is false.

//Ex 2.24
//Why is the initialization of p legal but that of lp illegal?

int i = 42; 
void *p = &i;  // void is a special pointer type that can hold the address of any object.
long *lp = &i; // A long type can't hold an references of a integer object.

Exercises Section 2.3.3
//Ex 2.25
//Determine the types and values of each of the following variables.

(a) int *ip, i , &r = i;

ip = initializedpointer ip but hold no address 
i = integer 
&r = r is the references of i.

(b) int i, *ip = 0;
i = integer
*ip = ip is initialized but addresses no object

(c) int *ip, ip2;
*ip = initializedpointer ip but hold no address 
ip2 = integers

Exercises Section 2.4
//Ex 2.26
//Which of the following are legal? For those that are illegal, explain why.

(a) const int buf; //constant variable must be initialized 
(b) int cnt = 0;
(c) const int sz = cnt
(d) ++cnt; ++sz; //cnt increase by one, but sz remain constant.

Exercises Section 2.4.2 
//Ex 2.27
//Which of the following initializations are legal ? Explain why.

(a) int i = -1, &r = 0; //Invalid initialization, of non-constant references type of type 
(b) int * const p2 = &i2; // p2 will always point to i2
(c) const int i = -1, &r = 0 // Valid, it's constant varaible and references
(d) const int *const p3 = &i2; //  p3 is a constant pointer to a const object, if i2 is constant
(e) const int *p1 = &i1; // Invalid, the pointer itself isn't const because isn't putting the const after the *.
(f) const int &const r2; // Invalid, the constant references must be initialized 
(g) const int i2 = i, &r = i; // Invalid, a nonconstant references refer to a constant variable i.

//Ex 2.28
// Explain the following definitions. Identify any that are illegal.
(a) int i, *const cp;  // illegal, constant pointer must be initialize
(b) int *p1, *const p2; // illegal, constant point must be initialized.
(c) const int ic, *r = ic // illegal, non-constant refer to a constant variable
(d) const int * const p3; // illegal, the format is correct, but const variable must be initialized
(e) const int *p; // illegal, incorrect constant format.

//Ex 2.29
//Using the variables in the previous exercise, which of the following assigment are legal?
//Explain why.
(a) i = ic // Legal, it just copied the value into i.
(b) p1 = p3 // incorrect, invalid conversion, p1 is non-constant pointe, p3 must hold a constant reference, and p1 can't able hold a constant reference
(c) p1 = &ic; // Incorrect, invalid conversion, same reason from b
(d) p3 = &ic; // Legal, a constant pointer holding a constant refer address of p3
(e) p2 = p1; //Illegal, invalid conversion
(f) ic = *p3; //Illegal, ic is a constant variable, and can't equal to a pointer of p3.

Exercises Section 2.4.3
//Ex 2.30
//For each of the following declaration indicate whether the object being declared has top-level or low-level const

const int v2 = 0;  // top-level constant
int v1 = v2; // top level constant
int *p1 = &v1, &r1 = v1; // low level constant
const int *p2 = &v2, * const p3 = &i, &r2 = v2; //low level constant
         
