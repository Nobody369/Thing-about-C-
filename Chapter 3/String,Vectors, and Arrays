//String which supports variable-length character string
//Vector which defines variable-size collections.

3.1 NameSpace Using Declarations
// Std :: cin.
//These names use the scope operator (::). which telling the compiler to look in the scope of the left-hand operand for the name of the right-hand operand.
//Thus, std :: cin which mean we want to use the name "cin" from the namespace std.

//Eaier way to use namespace members.
//By using declaration.
//Help us without qualify the name with a namespace_name:: prefix.
//The using declaration has the form

 using namesapce :: name
 
//Once it made, we can access name directly.

A separate using Declaration Is Required for Each Name:

#include <iostream>

using std :: cin;
using std : cout; using std :: endl;

int main()
{
  //Information, such as cout << "" << endl;
}

Headers Should Not Include using Declarations.
//Code inside headers ordinarily should not use using declarations  
//Since contents of a header are copied into the including program's text.
//If header has a using declaration, then every program that include that headers get that same using declaration.
//To avoid unexpected name conflicts.

3.2 Library string Type
//A string is a variable-length sequence of characters.
//To use the string type, we must include the string header.
//Because it is part of the library, string is defined in the std namespace.

#include <string>
using std :: string;

3.2.1 Defining and Initializing strings
// Each class defines how objects o its type can be initialized.
//A class may have more than one way to initialize objects of its type.

Here are the examples:
string s1; //default initialize
string s2 = s1; // copy of s1;
string s3 = "hiya"; // copy of the string literal
string s4(10, 'c); // s4 is cccccccccc
string s5("value");

Direct and Copy Forms of Initialization
//When we initialize a variable using = , we are asking the compiler to copy initialize the object of copying the initializer on the right-hand side into the object being created.
//When we omit the =, we use direct initialization.

string s6 = "hiya", // copy initialization
string s7("hiya"); // direct initialization
string s8(10,'c'); // direct initialization
string s9 = string(10,'c'); // copy initialization

3.2.2 Operations on Strings
//A class can define operatons that are called by name, such as the isbn function of our Sales_item class.

Table 3.2 String Operations
os << s // writes onto output stream os. Return os
is >> s //Reads whitespace-separated string from is to s. Return is.
getline(is, s) //Reads a line of input from is intos. Return is.
s.empty() //Return true if s is empty; otherwise false
s.size() // Returns the numbers of character in s.
s[n] // Return a reference to the char at position n in s; positions start at 0;
s1 + s2 // return a string that is the concatenation of s1 and s2
s1 = s2 // Replaces character in s1 with a copy o fs2
s1 == s2 // The strings s1 and s2 are equal if they contain the same character
s1 != s2 // True if the character inside them is different, otherwise is false
<. <=, >, >= // Comparisons are case-sensitive and use dictionary ordering

Note : We could use string name to read the input like other type did, however it going read only one word once you input whitespace

Reading an Unknown Numbers of strings

int main()
{
  string word;
   while ( cin >> word)
    cout << word << endl;
    
  return 0;
}
//Read the input until it hits the end of the file or invalid input

Use getline to Read an Entire 
//getline function, read the given stream up to and including the first newline and stores what it read-not including the newline- in its string argument.

int main()
{
  string line;
  //read input a line at a time until end-of-file
  while (getline(cin,line))
    cout << line << endl;
  return 0;
}

Note : The newline that causes getline to return is discarded; the newline is not stored in the string;

The string empty and size Operations
//The empty functions does what one would expect.
//It return a bool indicating whether the string is empty.
//To call this function, we use the dot operator to specify the object on which we want to run the empty function.

//read input a line at a time and discard a blank lines
while (getline (cin, line))
  if (!line.empty())
    cout << line << endl;
 
 //The size member returns the length fo a string.
 string list;
 while (getline ( cin, list))
    if (list.size() > 80)
        cout << line << endl;
    
The string :: size_type Type
  //The type size _type is one of these companion types.
  //To use the size-type define by string, we use the scope operator to say that the name size_types is defined in the string class.
  //we could by using auto or decltype in for string
  
auto len = line.size(); // len has tyoe string :: size_type

Tip: You can avoid problem due to conversion between unsigned and int by not using intS in expression that use size()

Comparision strings
1. If two strings have different lengths and if every character in the shorted string is equal to the corresponding character of the longer string, then the shorter string is less than the longer one.
2. If any characters at corresponding positions in the two string differ, then the result of the string comparision is the result of comparing the first character which the string differs.

Example:
string str = "Hello";
string phrase = "Hello World";
string slang = "Hiya";

//Using rule 1, str is less than phrase.
//By applying rule 2, we see that slang is greater than both str and phrase.

Assignment for strings:

string st1(10,'c'), st2; 
st1 = st2;

Adding Two stringS
string s1 = "hello. ", s2 = "world\n";
string s3 = s1 + s2; //s3 is hello, world\n
s1 += s2; \\ equivalence to s1 = s1 + s2;

Adding Literals and string:

string s1 = "hello", s2 = "world"; // No punctuation in s1 or s2
string s3 = s1 + " , " + s2 + '\n';

//when we mix strings and string or character literal, at least one operand to each + operator must be of string type

string s4 = s1 + ", "; //ok
string s5 = "hello" + ", "; //error: no string operand
string s6 + s1 + " , " + "world"; // ok, each + has a string operand
string s7 = "hello" + ", " + s2 // error : can't add string literal

string tmp = s1 + ", "; //ok, + has a string operand
s6 = tmp + "world"; // ok, + has a string operand.

string s7 = ("hello" + ",") + s2; //Easy to see that the first subexpression adds two string literals.

3.2.3. Dealing with the Characters in a string
isalnum(c) //true, if c is a letter or a digit
isalpha(c) //true if c is letter
iscntrl(c) //true if c is a control character
isdigit(c) // true, if c is a digit
isgraph(c) // true, if c is not a space but is printable
islower(c) // true if c is a lowercase letter.
isprint(c) // true if c is printable character
ispunct(c) // true if c is whitespace
isupper(c) // true if c is an uppercase letter.
issxdigit(c) // true if c is a heaxdecimal digit
tolower(c) //If c is an uppercase letter, return its lowercase equivalence; otherwise return c unchancged
toUpper(c) // If c is an lowercase, return its uppercase equivalent.

Processed Every Character:
//Ranged for Statement.
for (declaration : expresion)
  statemnet

string str("some string");
//print the character in str one character to a line
for (auto c : str) // for every char in str
    cout << c << endl; // print the current character followed by a newline.

//As a somewhat more complicated example, we'll use a range for and the ispunct function to count the number of punctuation characters in a string"

string s("Hello World!!!");
//punct_cnt has the same type that s.size returns;

decltype(s.size()) punct_cnt = 0;
// count the number of punctuation characterr in s

for (auto c : s) // for every char in s
  if (ispunct(c)) // if the character is punctuation
   ++punct_cnt;  //increment the punctuation counter
cout << punct_cnt << " punctuation characters in " << s << endl;

The output of this program is :
  3 punctutation characters in Hello World!!!
  
Using a Range for to Change the Characters in a string
//If we want to changed the value of the characters in a string, we must define the loop variable as a reference type

string s("Hello World!!!");
//conver s to uppercase
for (auto &c : c) // for every char in s (note : c is a reference)
  c = toupper(c); // c is a reerence, so the assignment changed the char in s.
  cout << s << endl;
  
Processing Only Some Characters?
//The subscript operator (the [] operator) takes a string :: size_types values that denotes the position of the character we want to access.

Note : The value we use to subscript a string must be >= 0 and < size().
//The result of using an index outside this range is underfine.
//By implication, subscripting an empty string is underfine.

//The value in the subscript is referred to as "a subscript" or "an index."
//Follow examples uses the subscript operator to print the first character in a string.
if (!s.empty())
  cout << s[0] << endl;
  
string s("some string");
if (!s.empty()) // mae sure there's a character in s[0]
  s[0] = toupper(s[0]); // assign a new value to the first character in s.
  
Using a Subscript for Iteration:
//Process character in s until we run out of characters or we hit a whitespace
for (decltype(s.size)) index = 0;
  index != s.size() && !isspace(s[index]);++index)
  s[index] = toupper(s[index]); // capitalize the current character

This program generates:
SOME string

Using a Subscript for Random Access:
const string hexdigits = "0123456789ABCDEF"; // possible hex digits
cout << "Enter a series of number between 0 and 15" << separated by spaces. Hit Enter when finished " << endl;

string result; // will hold the resulting hexify 'd string
string :: size_type n; // hold numbers from the input

while (cin >> n )
  if ( n < hexdigits.size()) // ignore invalid input
    result ++ hhexdigits[n]; // fetch the indicated hex digit
cout << "Your hex number is: " << result << endl;

If we give this program the input :
12 0 5 15 8 15

the ouput will be 
Your hex number is : C05F8F

3.3 Library Vector Type
//A vector is a collection of objects, all of which have the same type.
//Every object in the colleciton has an associated index, which gives access to that object.
//A vector is often refer as a container because it "contains" other objects.

//To use vector, we must use appropriate using declaration is made.

#include <vector>
using std :: vector;

//A vector is a class template.
//The process that the compiler uses to create classes or functions from templates is called instantiation.

vector<int> ivet; // ivec holds object of type int
vector <Sales_item> Sales_vec; // holds Sales_item
vector <vector<string>> file; //vector whose elements are vectors

Note :
//Vector is a template, not a type.
//Type generated from vector must include the element type, for example <int>

3.3.1 Defining and Initializing Vectors.
//Table 3.4. Ways to Initialzie a vector
vector <T> v1   //vector that holds objects of type T. Default initializaiton;
vector <T> v2(v1) // v2 has a copy of each elements in v1
vector <T> v2 = v1 // Equivalent to v2(v1), v2 is a copy of the elements in v1.
vector <T> v3 (n,val) // v3 has n elements with value val
vector <T> v4(n) // v4 has n copies of a value-initialized object.
vector <T> v5{a,b,c ...} //v5 has as many elements as there are initializers; elements are initalized by corresponding initializers.
vector <T> v5 = {a,b,c ...} // Equivalent to v5(a,b,c...)

//We can default initialize a vector, which creates an empy vector o the specified type:
vector <string> svect; //default initialization; svec has no elements

vector <int> ivec; // initially empty
//give ivec some values
vector <int> ivec2(ivecct); // copy elements of ivec into ivec2
vector <int> ivec3 = ivec; // copy elements of ivec into iverc3
vector <string> svec(ivec2); // error : svec holds strings, not int.

List Initialzing a vector:
vector <string> articles = {"a", "an", "the"};

Creating a Specified Numbers of Elements:
vector <int> ivec(10,-1); // ten int elements, each initialized to -1
vector <string> svec(10, "hi"); // ten string, fill in each element with "hi"

Value Initialization:
//We can usually omit the value and supply only a size.
//In this case the library creates a value-initialized element initializer for us.

For instance:
vector <int> ivec (10); // ten elements, each initialized to 0;
vector <string> svec (10); // ten elements, each an empty string.

//There are two restrictions on this form of initialization:
1.Some calsses require that we always supply an explicit initalizers.
2.When we supply an element count without also supplying an inital value, we must use the direct form of initialzation

For instance:

vector <int> vi = 10; //error : must use direct initialzation to supply a size.


3.3.2. Adding Elements to a vector
//When we want to have a list of vector from 0 to 9, it eazy to initialize it.
//However, What if we wanted elemenets from 0 to 99 or 0 to 999? If will required lot of time to initialize it.
//Therefore, it would be better if we create an empy vector and use a vector member named push_back to add elements at run time.

vector <int> v2; // empty vector
for (int i = 0; i != 100; ++i)
  v2.push_back(i); //append sequential integers to v2 at end of loop v2 has 100 elements, values 0 .. 99
  
//Read words from the standard input and store them as elements in a vector
string word;
vector <string> text; // empty vector
while (cin >> word) {
  text.push_back(word); //append word to text
}

3.3.3 Other vector Operaitons
//Talbe 3.5. vector Operations
v.empty() //Returns true if v is empty; otherwise returns false.
v.size() // Returns the number of elements in v.
v.push_back(t) //Adds an element with value t to end of v.
v[n] // Return a references to the element at position n in v.
v1 = v2 // Replaces the element in v1 with a copy of element in v2
v1 = {a,b,c .. } //Replaces the element in v1 with a copy of the elements in the comma-separated list.
v1 == v2 //v1 and v2 are equal if they have the same number of elements and each element in v1 is equal to corresponding element in v2.
v1 != v2  //Have their normal meaning using dictionary ordering.
<,<=,>,>=  

vector <int> v{1,2,3,4,5,6,7,8,9};
for (auto &i : v) // for each elemeent in v (note : is a referenc)
 i*= i;  // square the element value
for (auto i : v) // for each element in v
 cout << i << " " ;
 cout << endl
 
Note : To use size_type, we must name the type in which it is defined, A vector type always includes its element type
vector <int> :: size_type // ok
vector :: size_type // error

Subscripting Does Not Add Elements:
vector <int> ivec; // empty vector
for (decltype(ivec.size()) ix = 0; ix != 10; ++ix)
  ivec[ix] = ix; // disaster : ivec has no elements
  
//Ivec is an empty vector; there are no elements to subscript.
//The subscript operator on vector (and string) fetches an exisitng elements; it oes not add an element

3.4. Introducing Iterators
//Iterators, have membbers that return iterators.
//These types have members named begin and end.
//The begin member returns an iterator that denotes the first element

//The compiler determines the types of b and e;
//b denoes the first element and e denotes one past the last element in v.

auto b = v.begin(), e = v.end(); //b and e have the same type.

// The iterator returned by end is an iterator positioned " one past the end" of the associated container(or string).
//This iterator denotes a nonexistent element "off the end" of the container.
//It used as a marker indicating that all element has been processed.
//The iterator returned by end is often referred to as the off-the-end iteraotr or the end iterator.

Note : If the container is empty, the iterators returned by begin and end are equal - they are both off-the-end iterators.

Iterator Operations:
//Table 3.6 Standard Container Iterator Operations
*iter // Returns a reference to the element denoted by the iterator iter.
iter -> mem // Dereferenes iter and fetches the member named mem from the underlying element. Equivalent to (*iter) mem
++iter // Increment iter to refer to the next element in the container.
--iter // decrements iter to refer to the previous element in the container.
iter1 == iter2 // Compares two iterators for equality (inequality). Two iterators are equal
iter1 != iter2 // If they denotes the same element or if they are the off-the-end iterator for the same container.


string s("some string");
if (s.begin() != s.end()) { //make sure s is not empty
  auto it = s.begin(); // it denotes the first
  *it = toupper(*it);  // make that character uppercase



