Exercises Section 4.1.2
//Ex 4.1
//What is the value returnned by 5 + 10 * 20 / 2?

Answer : 105;

//Ex 4.2
//Using Table 4.12. parenthesize the following expressions to indicate the order in which the operands are grouped?

a. * vec.begin() // = *(vec.begin())

b. * vec.begin() + 1 // = (* (vec.begin())) + 1

Exercise Section 4.1.3
//Ex 4.3
//Order of evaluation of most of the binary operators is left underfined to give the compiler opportunites for optimization.
//This strategy presents a trade-off between efficient code generation and potentil pitfalls in the use of language by the programer.
//Do you consider than an acceptable trade off? Why or Why not?

Answer : More convient for me.

Exercises Section 4.2
//Ex 4.4 Parenthesize the following expression to show how it is evaluated.
//Test your answer by compiling the expression (without parentheses) and printing its result.

12 / 3 * 4 + 5 * 15 + 24 % 4 / 2;

Answer: ( (12 / 3) * 4) + (5  * 15) + ( (24 % 2 ) / 2) 
Answer: ( ( 12 / 3 ) * 4) + (5 * 15 ) = 16 + 75 = 91

//Ex 4.5
//Determine the result of the following expressions.
(a) -30 * 3 + 21 / 5
A: -90 + 4.2 = -85.8;

(b) -30 + 3 * 21 / 5
A: -30 + 63/5 = -30 + 12.6 = -17.4

(c) 30 / 3 * 21 % 5
A: 10 * 3 % 5 = 30 & 5 = 0

(d) -30 / 3 * 21 % 4
A: -10 * 21 % 4 = -210  % 4 = -2

//Ex 4.6
//Write an expression to determine whether an int value is even or odd.
/*
int i;
cin >> i;

if (i % 2 == 0){
  cout << "even" << endl;
}
else{
  cout << "odd" << endl;
}

return 0;
*/

//Ex 4.7
//What does overflow mean? Show three expression that will overflow
//The maximum value a type can hold, if it's over, it go reverse and become negative.

Int = 2^31
double = 2^63
bool = 2^7

Exercise Section 4.3
//Ex 4.8
//Explain when operands are evaluated in the logical AND, logical OR, and equality operators
AND, &&, when both a and b is true

OR, ||, Either condition is true, then the statement is true.

Equality, when A and B are equal length and same letter. Then the statement is true.

//Ex 4.9
//Explain the behavior of the condition in the following if:

const char *cp = "Hello World";
if (cp && *cp)
/
//True, because cp is a non-null pointer.
//True, if the character cp points to is nonzero.

//Ex 4.10
//Write the condition for a while loop that would read intS from the standard input and stop when the value read is equal to 42.

int i;
while (cin >> i){
  if (i == 42){
    break;
  } 
  cout << i;
}
cout << endl;
 
//Ex 4.11
//Write an expression that tests four values, a , b, c, and d, and ensures that a is greater than b,
which is greater than c, which is greater than d.

int a,b,c,d;
cin >> a >> b >> c >> d;

if (a > b && a >> c && a >> d) {
  cout << " a is greater";
}

//Ex 4.12
//Assuming i, j, k are all intS, explain what i != j < k means.

int i, j, k;
i != j < k, it seems like the condition j is not equal to i, and j is less than k.
//Bool result

i != (j < k)

Exercises Secion 4.4
//Ex 4.13
//What are the values of i and d after each assignment?
int i; double d;

a. d = i = 3.5;
i = 3, and d = 3;

b. i = d = 3.5;
i = 3, and d = 3.5;

//Ex 4.14
//Explain what happens in each of the if tests:
if (42 = i) .// Compile error : i can't be assign
if (i = 42) // true

//Ex 4.15
//The following assignment is illegal.
//Why? How would you correct it?

double dval; int ival; int *pi;
dval = ival = pi = 0;

//P is a pointer to int 
//Cannot assign int to int*

correct way;
dval = ival = 0;
pi = 0;

//Ex 4.16
//Although the following are legal, they probably do not behave as the programmer expects.
//Why? Rewrite the expressions as you think they should be.

(a) if (p = getPtr() != 0)
should be : ((p == getPtr) != 0 )

(b) if (i = 1024)
should be : (i == 1024)

Exercises Section 4.5
//Ex 4.17
//Explain the difference between prefix and postfix increment

Answer: Prefix increment and postfix increment they work the same, adding one to the variable.
        However, prefix evaluated first and postfix evaluated last.
        
//Ex 4.18
//What would happen if the while loop on page 148 that prints the elements from a vector used the prefix increment operator?

Answer: It will print out the second element first, and dereference b.end();

//Ex 4.19
//Given that ptr points to an int, that vec is a vector<int>, and that ival is an int, explain the behavior of each of these expressions.
//Which if any, are likely to be incorrected? Why? How might each be corrected?

(a) ptr != 0 && *ptr++
//check ptr is not a null ptr, and then check the pointer value, by adding one.

(b)ival++ && ival // check ival, and then ival+1 

(c)vec[ival++] <= vec[ival] // incorrect, this is an undefined behavior
correct : vec[ival] <= vec[ival+1]

Exercises Section 4.6
//Ex 4.20
//Assuming that iter is a vector<string> :: iterator, indicate which, if any, of the following expressions are legal.
//Explain the behavior of the legal expressions and why those aren't legal are in error;

(a) *iter++; //check the pointer value of iter, and then ++iter

(b)(*iter)++; //illegal, *iter is a string,cannot increment value

(c) *iter.empty() // illegal, iter use -> to see its empty()

(d) iter->empty(); // check iter is empty or not

(e) ++*iter; // illegal, *iter is a string, cannot increment value

(f) iter++-> empty(); // check iter is empty first, then ++iter

Exercises Section 4.7
//Ex 4.21
//Write a program to use a conditional operator to find the elements in a vector<int> that have
//odd value and double the value of each such element.

#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main() {

  vector<int> vec = {1,2,3,4,5,6,7,8};

  string check = "";

  for (auto i : vec){

    check = ((i % 2 != 0) ? "true" : "false");
        if (check == "true"){
          i = i * 2;
          cout << i << endl;
        }
}
  return 0;
 }

//Ex 4.22
//Extend the program that assigned high pass,pass and fail grades to also assign low pass for grades between 60 and 75 incusive.
//Write two versions: one versions that uses only conditional operator; the otehr should use or or more if statmenet.
//Which versions do you think is easier to understand and why?

cout << ((grades > 75) ? "high pass" : (grades > 65) ? "pass" : "fail");

if (grades > 75) {
  cout << "high pass";
}
else if (grades > 65){
  cout << "pass";
}
else{
  cout << "failed";
}

//To be honest, the second seem much easier understand by the reader, but first one is helpful for the writer.

//Ex 4.23
//The following expression fails to compile due to operator precedence.
//Using Table 4.12, explain why it fails.
//How would you fix it?

string s = "word";
string p1 = s + s[s.size() - 1] == 's' ? "" : "s";

//compile behavior error, failed due to operator precedence?
//Fixed it
string p1 = s + (s[s.size() - 1] == 's' ? "" : "s");

//Ex 4.24
//Our program that distingusihed between high pass, pass, and fail depended on the fact
//that the conditional operator is right associative.
//Describe how that operator would be evaluated if the operator were left associative.

Answer: It will always failed

Exercises Section 4.8
//Ex 4.25
//What is the value of ~'q' << 6 on a machine with 32 bit intS and 8 bit charS, that use Latin 1 character set in which 'q' has the bit pattern 01110001?

*Skip

//Ex 4.26
//In our grading example in this section, what would happen if we used unsigned int as the type for quiz1;
Answer :It will hold the values that's non-neagtive, from 0-65535

//Ex 4.27
//What is the result of each of these expressions?
unsigned long ul1 = 3, ul2 = 7;
(a) ult & ult2 // 3
(b) ult | ult 2 // 7
(c) ult1 && ult2 // == true
(d)) ult1 || ult2 // == true

Exercises Section 4.9
//Ex 4.28
//Write a program to print the size o each of the built-in types.

auto i;
cout << i.size(); 

//Ex 4.29
//Predict the output of the following code and explain your reasoning.Now run the program.
//Is the output what you expected? If not, figrue out why.
int x[10]; int *p = x;

cout << sizeof(x) / sizeof(*x) << endl;
cout << sizeof(p) / sizeof(*p) << endl;

//The first number is 10
//The second result is undefined.

//Exercise 4.30
//Using Table 4.12, parenthsize the following expressions to match the default evaluation:
a. sizeof x + y; // (sizeof(x) + y)
b. size p->mem[i]; // (p -> mem[i])
c. sizeof a < b; // (size of a) < b
d. sizeof f();; // The return number size, if is void, is undefined

  


