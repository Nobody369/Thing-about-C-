Exercise Section 5.1
//Ex 5.1
//What is a null statement? When might you use a null statement?

Answer : A null statement is when you used only a semicolons
        It's useful where the language requires a statement but the program's logic does not.
        
//Ex 5.2
//What is a block? When might you might use a block?

Answer : A blocks is to used to enclose your statement, preventing manuipualte the varaible by quoting them using {//statement };

//Ex 5.3
//Use the comma operator to rewrite the while loop from so that it no longer requires a block. Explain whether this rewrite improves or diminishes the readability of this code.

Answer: It's dimisnishes the readability to use comma operator to rewrite the while loop.

Exercises Section 5.2
//Ex 5.4
//Explain each of the following examples and correct any problem you detect.

(a) While (string :: iterator iter != s.end()) {
//Illegal declaration : string :: iterator iter != s.end()

correct way
std :: string :: iterator iter = s.begin();
while(iter != s.end()){/*...*/}

(b) while (bool status = find(word)){ /*....*/};
if (!status) {/*....*/}

//variable doesn't exist.
//Declare a variable inside a while loop cannot be used outside of the scope.

while (bool status = find(word)){
/*...*/
if (!status) { /*...*/}
}

Exercises Section 5.3.1
//Ex 5.5
//Using an if-else statement, write your own version of the program to generate the letter grade from a numeric grade.

if (grade >= 90){
  cout << "A";
}
else if (grade >= 80 && grade < 90{
  cout << "B";
}
else if (grade >= 70 && grade < 80){
  cout << "C";
}
else{
  cout << "F";
}

//Ex 5.6
//Rewrite your grading program to use the conditional operator in place of the if-else statement

if (grade >= 90 ? " A " : (grade >= 80) ? " B " : (grade >= 70) ? " C" : " F "){
}

//Ex 5.7
//Correct the errors in each of the following code fragments:
(a) if (ival != ival2)
  ival1 = ival2
    else (ival1 = ival2 = 0);
    
//Change else{
  ival1 = ival2 = 0;
  }
(b) if (ival < minval)
minval = ival;
occurs = 1;
//Occurs doesn't declare
(c) if  (int ival = get_value())
  cout << "ival = " << ival << endl;
  if(!ival)
    cout << "ival" = 0\n";
 
//correct if : ival == get_value()
 
(d) if (ival = 0)
  ival = get_value();
  
//Correct if : ival == 0

//Ex 5.8
//What is a "dangling else" ? How are else clasuss resovled in c++?

Answer: Match with the cloest preceding unmatched if

Exercises Section 5.3.2
//Ex 5.9
//Write a program using a series of if statement to count the number of vowels in text read from cin.
int a = 0, e = 0, i = 0, o = 0, u = 0;
char vowel;
while (cin >> vowel){
  if (vowel == 'a'){
    ++a;
  }
  if (vowel == 'e'){
    ++e;
  }
  if (vowel == 'i'){
    ++i;
  }
  if (vowel == 'o'){
    ++o;
  }
  if (vowel == 'u'){
    ++u;
  }
}

//Ex 5.10
//There is one problem with our vowel-counting program as we've implemented it: It doesn't count capital letters as vowels.
//Write a program that counts both lower - and uppercase leets as the appropriate vowel - that is, your program should cound both 'a' and 'A' as part of aCnt, and so forth

int a = 0, e = 0, i = 0, o = 0, u = 0;
char vowel;
while (cin >> tolower(vowel)){
  if (vowel == 'a'){
    ++a;
  }
  if (vowel == 'e'){
    ++e;
  }
  if (vowel == 'i'){
    ++i;
  }
  if (vowel == 'o'){
    ++o;
  }
  if (vowel == 'u'){
    ++u;
  }
}

//Ex 5.11
//Modify our vowel-counting program so that it also counts the number of blank spaces,tabs, and newlines read.


