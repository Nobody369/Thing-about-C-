Exercise Section 5.1
//Ex 5.1
//What is a null statement? When might you use a null statement?

Answer : A null statement is when you used only a semicolons
        It's useful where the language requires a statement but the program's logic does not.
        
//Ex 5.2
//What is a block? When might you might use a block?

Answer : A blocks is to used to enclose your statement, preventing manuipualte the varaible by quoting them using {//statement };

//Ex 5.3
//Use the comma operator to rewrite the while loop from so that it no longer requires a block. Explain whether this rewrite improves or diminishes the readability of this code.

Answer: It's dimisnishes the readability to use comma operator to rewrite the while loop.

Exercises Section 5.2
//Ex 5.4
//Explain each of the following examples and correct any problem you detect.

(a) While (string :: iterator iter != s.end()) {
//Illegal declaration : string :: iterator iter != s.end()

correct way
std :: string :: iterator iter = s.begin();
while(iter != s.end()){/*...*/}

(b) while (bool status = find(word)){ /*....*/};
if (!status) {/*....*/}

//variable doesn't exist.
//Declare a variable inside a while loop cannot be used outside of the scope.

while (bool status = find(word)){
/*...*/
if (!status) { /*...*/}
}

Exercises Section 5.3.1
//Ex 5.5
//Using an if-else statement, write your own version of the program to generate the letter grade from a numeric grade.

if (grade >= 90){
  cout << "A";
}
else if (grade >= 80 && grade < 90{
  cout << "B";
}
else if (grade >= 70 && grade < 80){
  cout << "C";
}
else{
  cout << "F";
}

//Ex 5.6
//Rewrite your grading program to use the conditional operator in place of the if-else statement

if (grade >= 90 ? " A " : (grade >= 80) ? " B " : (grade >= 70) ? " C" : " F "){
}

//Ex 5.7
//Correct the errors in each of the following code fragments:
(a) if (ival != ival2)
  ival1 = ival2
    else (ival1 = ival2 = 0);
    
//Change else{
  ival1 = ival2 = 0;
  }
(b) if (ival < minval)
minval = ival;
occurs = 1;
//Occurs doesn't declare
(c) if  (int ival = get_value())
  cout << "ival = " << ival << endl;
  if(!ival)
    cout << "ival" = 0\n";
 
//correct if : ival == get_value()
 
(d) if (ival = 0)
  ival = get_value();
  
//Correct if : ival == 0

//Ex 5.8
//What is a "dangling else" ? How are else clasuss resovled in c++?

Answer: Match with the cloest preceding unmatched if

Exercises Section 5.3.2
//Ex 5.9
//Write a program using a series of if statement to count the number of vowels in text read from cin.
//Ex 5.10
//There is one problem with our vowel-counting program as we've implemented it: It doesn't count capital letters as vowels.
//Write a program that counts both lower - and uppercase leets as the appropriate vowel - that is, your program should cound both 'a' and 'A' as part of aCnt, and so forth
//Ex 5.11
//Modify our vowel-counting program so that it also counts the number of blank spaces,tabs, and newlines read.
//Ex 5.12
//Modify our vowel-counting program so that is count the number of occureneces of the following two-character sequences: ff, fl, and fi.

int a = 0, e = 0, i = 0, o = 0, u = 0, spaces = 0, tab = 0, newLine = 0, ff = 0, fl = 0, fi = 0;

    char vowel;
    string text;
    getline(cin,text);


    for (int i = 0; i < text.size();i++){
      vowel = text[i];
      vowel = tolower(vowel);
      if (vowel == 'a'){
        ++a;
      }
      if (vowel == 'e'){
        ++e;
      }
      if (vowel == 'i'){
        ++i;
      }
      if (vowel == 'o'){
        ++o;
      }
      if (vowel == 'u'){
        ++u;
      }
      if (vowel == ' '){
        ++spaces;
      }
      if (vowel == '\t'){
        ++tab;
      }
      if (vowel == '\n'){
        ++newLine;
      }
      if (vowel == 'f'){
        if (i + 1 < text.size()){
            char vowel2 = text[i + 1];
            if (vowel2 == 'f'){
                ++ff;
            }
            else if(vowel2 == 'l'){
                ++fl;
            }
            else if (vowel2 == 'i'){
                ++fi;
            }
        }
      }
    }
    cout << "a: " << a << endl;
    cout << "e: " << e << endl;
    cout << "i: " << i << endl;
    cout << "o: " << o << endl;
    cout << "u: " << u << endl;
    cout << "space: " << spaces << endl;
    cout << "tab: " << tab << endl;
    cout << "new line: " << newLine<< endl;
    cout << "ff: " << ff << endl;
    cout << "fl: " << fl << endl;
    cout << "fi: " << fi << endl;

    return 0;

//Ex 5.13
//Each of the programs in the highlighted text on page 184 contains a common programming error.
//Identify and correct each error.

a. Need a break statement; add break after aCnt++ and eCnt++;
b. ix is not in the scope, should be delcare outside of the switch statement
c. caes label syntax error.
d. error, case label must be a constant expression.

Exercises Section 5.4.1
//Ex 5.14
//Write a program to read stringS from standard input looking for duplicated words.
//The program should find places in the input where one world is followed immediately by itsel.
//Keep track of the larget number of times a single repetiion occurs and which word is repeated.
//Print the maximum number of duplicates, or else print a message saying no word was repeated.
//For example, if the input is the output should indicate that the word now occurred three times.

Exercises Section 5.4.2
//Ex 5.15
//Explain each of the following loops
//Correct any problems you detect.

(a) for (int ix = 0; ix != sz; ++ix) {/*...*/}

if (ix !=sz){

//Declare ix outside the scope, 
int ix
for (ix = 0; ix != sz; ++ix)...

(b)int ix;
for (ix != sz; ++ix) {/*...*/}

Incorrect for loop format.
for (; ix != sz; ++ix)

(c) for (int ix = 0; ix !+ sz; ++ix; ++ sz) {/*...*/}

Answer: It could lead to infinite loop
for (int ix = 0; ix !+ sz; ++ix)

//Ex 5.16
//The while loop is paricurlay good good at executing while some condition holds; for example
//When we need to read values until end of file. The for loop is generally though of as a step loop: An index steps through a range of values in a collection.
//Write an idiomatic use of each loop and then rewrite each using the other loop construct.
//If you could use only one loop. which would you choose? why?

//I would choose while loop because is easier maintain and avoid the naming conflicts but it's harder to read.

//Ex 5.17
//Given two vectorS of intS, write a program, to determine whether one vector is a prefix of the other.
//For vectorS of unequal length. For example, given the vectorS containing 0,1,1,2
//0,1,1,2,3,5,8

vector <int> vc1 {1,2,3,0,6};
    vector <int> vc2 {1,2,3,0,6,7,9};

    if (vc1.size() < vc2.size()){
        for (int i = 0; i < vc1.size(); ++i){
            if (vc1[i] == vc2[i]){
                cout << vc1[i]<< endl;
            }
        }
    }
    return 0;
    
 Exercises Section 5.4.4
 //Ex 5.18
 //Explain each of the following loop.
 //Correct any problem you detect
 a. add bucket
 do{
 /*...*/
 } while (cin);
 
 b. do {
    /*....*/
    } while (int ival == get_response());
    
 c. Ival should declare outside of the loop
 int ival;
 do{
   ival = get_response();
   } while (ival) //
   
//Ex 5.19
//Write a program that uses a do while loop to repetitively request two stringS from the user and report which string is less than other.

string tx1;
string tx2;

do {
    if (tx1.size() < tx2.size()){
        cout << "string 1 is smaller" << endl;
    }
    else if (tx1.size() > tx2.size()){
        cout << "string 2 is smaller" << endl;
    }
    else{
        cout << "They are the same" << endl;
    }
 } while (cin >> tx1 >> tx2 );
 
 Exercises Section 5.5.1
 //Ex 5.20
 //Write a program to read a sequence of stringS from the standard input until either the same word occurs twice in succession or all the words have been read.
 //Use a while loop to read the text one word at a time.
 //Use the break statement to terminate the loop if a word occurs twice in succession.
 //Print the word if it occurs twice in succession, or else print a message saying that no word was repeated.
 
 string word;
    string temp = " " ;

    while (cin >> word){

        if (temp == word){
            cout << temp << endl;
            break;
        }
        temp = word;
    }

    cout << "All words has been read" << endl;
