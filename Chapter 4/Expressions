//An expression is composed of one or more operands and yields a result when it is evaluated.
//The simplest form of an expression is a single literal or variable.
//More complicated formed from an operator and one or more opernads.

4.1 Fundamentals
//4.1.1 Basic Concepts
//There are oth unary operators and binary operator.
//Unary operators, such as address-of(&) and dereference(*), act on one operand.
//Binary operators, such as equality(==) and multliplication (*), act on two operands.
//Ternary  operatros, that takes three operands, and one operators.

//Sometimes, *, are used as both an unary(dereference) and a binary(multiplcation) operator.
//The context in which a symbol is used determines whether the symbol represents a unary or binary operator.

Grouping Operators and Operands:
//To understand expressions with multiple operator required understanding the precedence and associativity of the operators.
//May depends on the order of evaluation of the operands.

For instance
//How the operands are grouped of the operators:

5 + 10 * 20 /2

Operand Conversions:
//Small integral type operands(e.g, bool, char, short, etc.) are generally promoted to a larger integral type, typically int.

Overloaded Operators:
//We can define what the operator mean when applied to class type.
//The IO Library >> and << operators and the operator we used with stringS, vectorS, and iterators are all overloaded operators.
//Using an overloaded operator, which mean the operator-including the type of its operand(s) and the result-depend on how the operator is defined.

Lvalues and Rvalues:
//Every expression in C++ is either an rvalue(are value) or an lvale(ell value)
//Inherited from C language
//lvalues could stand on the left-hand side of an assiggnment whereas rvalues could not.
//In C++, an lvalue expression yields an object or a function.
//However, some lvalues such as const objects, may not be the left-hand operand of an assignment.
//Moreover, some expression yield object but return them as rvalues, not lvalues.

//What it means was, when we used an object as an rvalue, we use the object's value(its contents), and an lvalue, stand for object identity(its location in memory)

//Lvalues and rvalues also differ when used with decltype.
//When we apply decltype to an expression(other than a variable), the result is a reference type if the expression yields an lvalue.

For instance:
//Assume p is an int*.
//Because dereference yields an lvalue, decltype(*p) is int&.
//In other hand, because the address-of operator yields an rvalue, decltype(&p) is int**, that is, a pointer to a pointer to type int.

4.1.2. Precdence and Associativity.
//An expression with two or more operators is a compound expression.
//Operands of operator with higher precedence group more tightly than operands of operators at lower precedence.
//Associativity determines how to group operands with the same precedence.

For instance:
//Because of precedence, the expression 3+4*5 is 23, not 35.
//Because of associativity, the expression 20-15-3 is 2, not 8.

Parenthess Override Precedence and Associativity:
For instance
cout << (7+3) * (4 -2 ) << endl; // print 20, not 17

When Precedence And Associativity Mattter:

For instance:
int ia[] = {0,2,4,6,8}; // array with five elements of type int
int last = *(ia + 4); // initialize last to 8, the value of ia[4]
last = *ia + 4; // last = 4, equivalent to ia[0] = 4

//If we want to access the element at the location ia+4, the element the parenthese around the addition are essential.
//Without parenthese, *ia is grouped first and 4 is added to the value in *ia

4.1.3. Order Of Evaluation.
//Precedence specifies how the operands are grouped.
//In most cases, the order is largely unspecified.

int i = f1() * f2();

//f1 and f2 will be called then multiply, but we don't know which one will called before others.
//Therefore, there are four operators that do guarantee the order in which operands are evaluated.

1.Logical And (&&) operator guarantess that its left-hand operand is evaluated first. Also, evaluated right hand when left-hand is true.
2.Logical Or (||) either true 
3. Conditional Operator(?:) 

Order of Evalaution, Precedence, and Associativity:
//Order of operand evaluation is independent of precedence and Associativity.
//In an expression such as f() + g() * h() + j():
-Precdence guarantees that the result of g() and h() are multipled.
-Associativity guarantees that the result of f() is added to the product of g() and h() and that the result of that addition is added to the value of j();
-There are no guarantees as to the order in which these functions are called.

4.2. Arithmetic Operators
//+ - * / % 

4.3 Logical and Relational Operators
//Table 4.2 Logical and Relational Operators
Associativity  Operator  FUnction       Use
Right           !         logical NOT  !expr
Left            <         less than     expr < expr
Left            <=        less than or equal expr <= expr
Left            >         greater than    expr > expr
Left            >=        greater than or equal expr >= expr
Left            ==        greater than or equal   expr >= expr
Left            &&        logical AND           expr || expr
Left            ||        logical OR            expr || expr

Logical AND and OR Operators:
-The right side of an && is evaluated if and only if left side is true
-The right side of an || is evaluated if and only if the left side is false.

Logical NOT Operator:
if (!.vec.empty()){
}

//Negative sign for bool values

The relational Operator:
// < , <=, >, >=
//Used in if statemenet , condition is evaluated as true when it meet the function.

Eqaulity Test and the bool Literals
// == , when operands a and b are equal

4.4 Assignment Operators
//The left-hand operand of an assignment operator must be a modifiable lvalue.
int i = 0, j = 0, l = 0; // initializen, not assignment
const int ci = i; // initialization, not assignment

//Each of these assignment is illegal:

1024 = k // error: literal are rvalues
i + j = k; // error : arithmetic expressions are rvalues

ci = k; // error : ci is a const (nonmodifiable) lvalue

Assignment Is Right Associative:
//Unlike the other binary operator, assignment is right associative:
int ival, jval;
ival = jval = 0; //ok : each assigned 0

int ival, *pval; // ival is an int
ival = pval = 0; // error : cannot assign the value of a pointer to an int

Assignment Has Low Precedence:

Example:
//a verbase the therefore more error-prone way to write this loop

int i = get_value(); // get the first value
while (i != 42){
  //do something
  i = get_value(); // get remaining values
}

Note : Because assignment has lower precedence than the relational operators, parentheses are usually
needed around assignments in conditions.

Beware of Confusing Equality and Assignment Operators :
if (i = j)
//The condition in this if assign the value if j to i and then test the result of the assignment.

Compund Assignment Operators :
//We often apply an operator to an object and then assign the result to the same object.

int sum = 0;
//sum values from 1 through 10 inclusive
for (int val = 1l val <= 10; ++ val)
  sum += val; // equivalent to sum = sum + val;
  
4.5. Increment and Decrement OPerator
// Increment(++) and decrement (--) operator provide a convenient notational shorthand for adding or subtracting 1 from an object. 

Combining Dereference and Increment in a Single Expression

auto pbeg = v.begin();
//print elements up to the first negative value
while (pbeg != v.end() && *beg >= 0)
    cout << *pbeg++ MM endl; //print the current value and advance pbeg.
    
 //The precdence of postfix increment is higher than that of the dereference operator, so *pbeg is equivalent to *(pbeg++).
 
 Remember That Operands Can Be Evaluated in Any Order.
 //Most operator give no guarantee as to the order in which operands will be evaluated.
 //When the subexpression changes the value of an operand that is used in another subexpression.
 
for (auto it = s.begin(); it != s.end() && !isspace(*it)l; ++it)
    *it = toupper(*it); // capitalize the current character
    
4.6. The Member Access Operators
//The dot and arrow operators provide for member access.
//The dot operator fetches a member from an object of class type; arrow is define so that ptr -> mem is a synonym for (*ptr). mem:

string s1 = "a string", *p = &s1;
auto n = s1.size(); // run the size member of the string s1
n = (*p).size(); // run size on the object to which p points
n = p -> size(); // equivalent to (*p).size()

//Dereferences has a lower precedence subexpression, we must parenthesize the derefference subexpression.
//run the size member of p, then dereference the result!

4.7. The Conditional Operator
//The conditional Operator (the ?: operator) let us embed simple if else logic inside an expression.

string finalgrade = (grade < 60) ? "fail" : "pass";
//Return "fail" when is true
//Return "pass" when is false

Nesting Conditional Operator:

finalgrade = (grade > 90) ? "high pass" : (grade < 60) ? "fail " : "pass";

//The condition first check "high pass", then return high pass is true, else check the other conditions.

Using a Conditional Operator in an Output Expression:
//The conditional operator has fairly low precdence.

cout << ((grade < 60) ? "fail" : "pass"); //print pass or fail
cout << (grade < 60) ? "fail : "pass"; // print 1 or 0!
cout << grade < 60 ? "fail" : "pass"; // error: compares cout to 60

4.8. The Bitwise Operators
//We can also use these operators on a library type named bitset that represents a flexibly sized collection of bits.

Table 4.3 Bitwise Operator(Left Associative)
Operator  Function      Use
~         bitwise Not   ~expr
<<        left shift     expr1 << expr2
>>         right shift   expr1 >> expr2
&          bitwise AND   expr1 & expr2
^          bitwise XOR   expr1 ^ expr2
|          bitwise OR    expr1 | expr2

Bitwise Shift Operators
//We have already used the overloaded version of the >> and << operators for input and output
//They yield a value that is copy of the left-hand operand with the bits shifted as directed by the right-hand operand.
//The right-hand operand must not be negative and must be a value that is strictly less than the number of bits in the result.
//Otherwise, the operation is undefined.

unsigned char bits = 0233; 10011011
bits << 8 // bits promoted to int and then shifted left by 8 bits
00000000 00000000 10011011 00000000
bits << 23 // ok: sign bit is unchanged
01001101 10000000 00000000 00000000
bits >> 3 // right shift 3 bits, 3 right0most bits discarded
00000000 00000000 00000000 00010011

Bitwise Not Operator
//The bitwise Not Operator (the ~operator) generates a new value with the bits of its operand inverted.
//Each 1 bits is set to 0;;

unsigned char bits = 0227; // 10010111
~bits
11111111 11111111 11111111 01101000

Bitwise AND, OR, and XOR Operators
//The AND(&),OR(|),and XOR(^) operators generate new values with the bit pattern composed from its two operands:
unsigned char b1 = 0145; //01100101
unsigned char b2 = 0257; //10101111

b1 & b2 //24 high-order bits all 0, 00100101
b1 | b2 //24 high-order bits all 0, 11101111
b1 ^ b2 //24 high-order bits all 0. 11001010

//For each bit position in the result of the bitwise AND operator(the & operator) the bit is 1 if both operand contain 1; otherwise, the result is 0.
//For the OR(inclusive or) operator (the | operator), the bit is 1 if either or both operands contain 1; otherwise, the result is 0.
//For the XOR(exclusive or) operator (the ^ operator), the bit is 1 if either but not both operands contain 1; otherwise, the result is 0.

Using Bitwise Operators:
//As an example of using the bitwise operators, let's assume a teacher has 30 students in a class.
//Each week the class is given a pass/fail quiz.
//We'll track the result of each quiz using one bit per student to represent the pass or fail grade on a given test.
//We might represent each quiz in unsigned integral value;

unsigned long quiz1 = 0; // we'll use this value as a collection of bits

1UL << 27 // generate a value with only bit number 27 set

//1UL has a a 1 in the low-order bit and (at least) 31 zero bits.
//We specified unsigned long because intS are only guaranteed to have 16 bits, and we need at least 27.
//This expression shifts the 1 bit left 27 positions inserting o bits behind it.

quiz1 |= 1UL << 27l // indicate student number 27 passed

quiz1 = quiz1 | 1ul << 27; // equivalent to quiz1 |= 1UL << 27;

quiz1 &= ~(1UL << 27); // student number 27 failed.

bool status = quiz1 & (1UL << 27); // how did student number 27 do.

Shift Operators Are Left Assocaitive.

4.9. The sizeof Operator
//The sizeof operator returns the size, in bytes, of an expression or a type name.
//The operator is right associative.

The result of applying sizeof depends in part on the type invovled:
-sizeof char or an expression of type char is guaranteed to be 1.
-sizeof a reference type returns the size of an object of the referenced type.
-sizeof a pointer returns the size needed hold a pointer.

4.10 Comma Operator
//Comma operator takes two operands, which it evaluates from to right.
//Like the logical AND and logical OR and the conditional operator, the comma operator guarantees the order in which its ands are evaluated.

4.11 Type Conversions
//When two types are related, we can use an object or value of one type where an operand of the related type is expected.
//Two typed are related if there is a conversion between them.

For instance
int ival = 3.541 + 3 // the compiler might warn about loss of precision.

When Implicit Conversions Occur:
//The compiler automatically converts operands in the following circumstances
-In most expressions, values of integral types smaller than int are first promoted to an appropriate larger integral type.
-In conditions, nonbool expression are converted to bool
-In initializations, the initializers is converted to the type of the varaible; in assignment, the right-hand operand is converted to the type of the left-hand.
-In arithmetic and relational expressions with operands of mixed type, the type are converted to a common type.

4.11. The Arithmetic Conversions.
//The rules define a hierarchy of type conversions in which operands to an operator are converted to the widest type.

Integral Promotions:
//The Integral promotions convert the small integral type to a larger integral type.
//The type bool,char,signed char, unsigned char, short, and unsigned short are promoted to int if all possible values of that type fit in an int.
//Otherwise, the value is promoted to unsigned int.

Operand of Unsiged Type:
//If the operands of an operator have differing types, those operands are ordinarily converted to a common type.
//If any operand is an unsigned type, the type to which the operands are converted depends on the lrelative sizes of the integral types on the machine.

4.11.2. Other Impolicit Conversions
1.Array to Pointer Conversios
//The array is automatically converted to a pointer to the first element in that array.

int ia[10]; // array of ten ints
int *ip = ia; // convert ia to a pointer to the first element

2. Pointer Conversions:
//Several Pointer conversions.
//A constant inntegral value of o and the literal nullptr can be converted to any pointer type; a pointer to any nonconst type can be converted to void*, and a pointer to any type can be converted to a const void*.

3. Conversions to bool:
//There is an automatic conversion from arithmetic or pointer types to bool.
//If the pointer or arithmetic value is zero, the conversion yields false, any other value yield true.
char *cp = get_string();
if (cp) // true if the pointer cp is not zero
while(cp) // true if *cp is not the null character

4. Conversion to const:
//We can convert a pointer to a nonconst type to a pointer to the corresponding const type, and similarly for references.

int i;
const int &j = i; //convert a nonconstant to a reference to const int
const int *p = &i; //convert address of a nonconst to the address of a const
int &r = j, *q = p; // error: conversion from const to nonconst not allowed. 

5. Conversions Defined by Class Types:
//Class types can define conversions that the compiler will apply automatically.

For instance:

string s, t = "a value"; // character string literal converted to type string
while (cin >> sO // while condition converts cin bool

4.11.3 Explicit Conversions
int i, j;
double slope = i/j;
Named Casts
//A named cast hast the following form:
cast-name<type>(expression);
//where type is the target type of the conversion, and the expression is value to be cast

static_cast:
//We can force our expression to use floating-point division by casting one off the operand to double:

double slope = static_cast<double>(j) / i;

const_cast:
//A const_cast changes only a low-level const in its operand:

const char *pc;
char *p = const_cast<char*>(pc); // ok: but writing through p is underfined

//Converntionally we say that a cast that converts a const object to a nonconst type "casts away the const".

reinterpret_cast:
//A reinterpret_cast generally performs a low-level reinterpretation of the bit pattern of its operands.

For example:
    int *ip;
    char *pc = reinterpret_cast<char*>(ip);
    
Old Styles Casts:

type(expr); // function-style cast notation
(type) expr; // C- language-style cast notation.


 
