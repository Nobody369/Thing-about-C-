Exercise Section 3.1
//Ex 3.1
//Rewrite the exercise from 1.4.1 and 2.6.2 with appropriate using declartion

#include <iostream>
using std :: cout;
using std :: endl;
int main()
{
  int sum = 0, val = 1;
  while (val <= 10) {
  sum += val;
  ++ val;
  }
  cout << "Sum of 1 to 10 inclusive is " << sum << endl;
  return 0;
}

Exercises Section 3.2.2
//Ex 3.2
//write a program to read the standard input a line at a time. Modify your program to read a word at a time.
#include <iostream>

using namespace std;

int main()
{
  string word;
  cin >> word;

  cout << word << endl;
   return 0;
}

//Ex 3.3
//Explain how whitespace characters are handled in the string input operator and in the getline function.

Answer : The program will seems white space as a gap, separate and read only the part before the white space
         The getline is including with the whitespace. However, we must use endl to end the current line and flush the buffer.

//Ex 3.4
//Write a program to read two stringS and report whether the stringS are equal. If not, report which of the two is larger.
//Now, change the program to report whether the stringS have the same length, and if not report which is longer.

#include <iostream>
#include <string>

using namespace std;

int main()
{
  string word1 = "", word2 = "";

  cin >> word1 >> word2;

  if (word1 > word2){

    cout << word1 << " bigger "<< endl;
  }
  else if (word2 > word1)
  {
    cout << word2 << " bigger " <<endl;
  }
  else{
    cout << "They are equal" << endl;
  }

   if (word1.size() > word2.size()){
    cout << word1 << " longer "<< endl;
  }
  else if (word2.size() > word1.size())
  {
    cout << word2 << " longer "<< endl;
  }
  else{
    cout << "They are equal long" << endl;
    }
    return 0;
}

//Ex 3.5
//Write a program to read stringS from the standard input, concatenating what is read into one large string.
//Print the concatenated string. Next, change the program to separate adjacent input stringS by a space
#include <iostream>
#include <string>

using namespace std;

int main()
{
  string word1 = "";

  cin >> word1;

  string largeWord = "Hello, " + word1;

  cout << largeWord << endl;

    return 0;
}
#include <iostream>
#include <string>
/------------------------------------
using namespace std;

int main()
{
      string word1;
      while (cin >> word1){
        cout << word1 << endl;
      }


    return 0;
}

Exercises Section 3.2.3
//Ex 3.6
//Use a range for to change all the character in a string to x.
#include <iostream>
#include <string>

using namespace std;

int main()
{
     string word1("some character");

     for (auto &i : word1){
     i = 'X';
     }
    cout << word1 << endl;
    return 0;
}

//Ex 3.7
//What would happen if you define the loop control varaible in the previous exercise as type char?
//Predict the result and then change your program to use a char to see if you were right.

Answer : It will still work, because string is build by a reference of char.
         while auto type, it just help us automatically select the type that we don't know what type we should use.
         
//Ex 3.8
//Rewrite the program in the first exercise, first using a while and again using a tranditional for loop. 
//Which of the three approaches do you prefer, and why?
//While Loop:
#include <iostream>
#include <string>

using namespace std;

int main()
{
     int size = 0;
     string word1("some character");

     while (size < word1.size()){
        word1[size] = 'X';
        ++size;
     }

    cout << word1 << endl;
    return 0;
}
//For loop
#include <iostream>
#include <string>

using namespace std;
int main()
{
     string word1("some character");

     for (int i = 0; i < word1.size(); ++i){

        word1[i] = 'X';
     }
     cout << word1 << endl;
     return 0;
}

Answer : For Range loop is more convenient because it doesn't require the writer to type in more variable and save more space.

//Ex 3.9
//What does the following program do? Is it valid ? If not, why not?
string s;
cout << s[0] << endl;

Answer : It is invalid, because s is an empty string, there's no character inside s.


//Ex 3.10
//Write a program that reads a string of character including punctuation and writes what was read but with the punctuation removed.

#include <iostream>
#include <string>

using namespace std;

int main()
{
   string s("hello world!..!.");
   for (char &c : s)
       if(!ispunct(c))
       {
           cout<<c;
       }
}

//Ex 3.11
//Is the following range for legal? If so, what is the type o fc ?

const string s = "Keep out!";
for (auto &c : s) { /* ... */)

Answer : For now on, the range for loop seem legal.
Constant string which mean you can't modify it.
Auto  &c will become into constant char reference c.
As long as the code inside the loops didn't change c, it would be legal.

Exercises Section 3.3.1
//Ex 3.12
//Which, if any, of the following vector definiton are in error ? 
//For those that are legal, explain what the definition does. 
// For those that are not legal, explain why they are illegal.

A. vector < vector < int>> ivec;// vector whose elements are vector 

B. vector <string> svec = ivec; // Error : You can't copy an element they were different type.

C. vector <string> svec(10,"null"); // direct initialize, ten string element, each initialized to null

//Ex 3.13
//How many element are there in each of the following vectorS?
//What are the values of the elements?

(a) vector <int> v1; // 0 elements
(b) vector <int> v2(10); // 10 elements with value 0.
(c) vector <int> v3(10,42); // 10 elements each are 42
(d) vector <int> v4{10}; // one element, value 10
(e) vector <int> v5{10,42}; // two elements, value 10 and 42
(f) vector <string> v6{10}; // size 10, value ""
(g) vector <string> v7{10,"hi"}; // size 10, value "hi"

Exercises Section 3.3.2
//Ex 3.14
//Write a program to read a sequence of intS from cin and store those values in a vector.

#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
   int word;
   vector <int> text;
   while ( cin >> word ) {
      text.push_back(word);
   }
   for (auto i : text){
        cout << i << " ";
   }
    cout << endl;
   return 0;
}

//Ex 3.15
//Repeat the previous program but read stringS this time.
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
    cout << "When you finish typing, please type 1" << endl;

    string word;

   vector <string> text;

   while (cin >> word) {

      if (word == "1"){
        break;
      }
      text.push_back(word);
   }
   for (auto i : text){
        cout << i << " ";
   }
    cout << endl;
   return 0;
}

Exercises Section 3.3.3
//Ex 3.16
//Write a program to print the size and contents of the vectorS from exerciseS were correct.
//If not restudy until you understnad why you were wrong.
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
   vector <int> v1;
   vector <int> v2(10);
   vector <int> v3(10,42);
   vector <int> v4{10};
   vector <string> v6{10};
   vector <string> v7{10,"hi"};
   for (auto i : v1){
        cout << i << " ";
   }
   cout << endl;
   cout << v1.size() << endl;
   return 0;
}

//Ex 3.17
//Read a sequence of words from cin and store the values a vector.
//After you've read all the words, process the vector and change each word to uppercase.
//Print the transformed elements, eight words to a line.
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
    cout << "When you finish typing, please type 1" << endl;

    string word;

   vector <string> text;

   while (cin >> word) {

      if (word == "1"){
        break;
      }
      text.push_back(word);
   }
   for (auto &i : text){
       for (auto &c : i){
        c = toupper(c);
        cout << c << " ";
        cout << endl;
       }
   }

   return 0;
}

//Ex 3.18
//Is the following program legal? If not, how might you fix it?

vector <int> ivec;
ivec[0] = 42;

Answer : Illegal, because ivec is empty. Incorrect way to adding the element.
Should used the push_back operation takes a value and "pushes" that values as a new last element onto the "back" of the vector.

//Ex 3.19
//List three ways to define a vector and give it ten elements, each with the value 42.
//Indicate which ways is better and explain why.

vector <int> ivec(10,42);
vector <int> ivec2{10,10,10,10,10,10,10,10,10,10};
vector <int> ivec3;
for range ....

//The first one is better, it used the vector template to help us initialize vectors and give it ten elements,each with the value 42.
//Other ones need to spend more time, typing one by one.

//Ex 3.20
//Read a set of integers into a vector.
//Print the sum of each pair of adjacent elements.
//Change your program so that it prints the sum of the first and last element.
//Followed by the sum of the second and second-to-last, and so on.

#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
    cout << "When you finish typing, please type characters" << endl;

    int word;

   vector <int> text;

   while (cin >> word) {

      text.push_back(word);
   }

   vector <int> combine;
   int temp = 0;

   for (int i = 0;i <= text.size();++i){
    if (i % 2 == 0 && i != 0){
        combine.push_back(temp);
        temp = 0;
    }
    temp += text[i];

   }

   vector <int> combine2;
   int temp2 = 0;
    for (int i = 0; i < combine.size() /2;++i){
            temp2 = combine[i] + combine [combine.size() - 1 - i];
            combine2.push_back(temp2);

    }

    for (auto c : combine2){
        cout << c << " ";
    }
    cout << endl;
   return 0;
}
//Hint, this only print out the result of first and last element.However, not sure what the user want to do with the middle element.
//Therefore, you would see that the middle element dispear.

Exercisese Section 3.4.1
//Ex 3.21
//Redo the first exercise from 3.3 using iterators

#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
    vector <int> v {1,2,3,4,5,6,7,8,9};
    for (auto i = v.begin(); i < v.end();++i){
   // for each element in v (note : i is a reference)
        *i *= *i;
    }
    for (auto i : v) // for each element in v
    cout << i << " "; // print the element
    cout << endl;

   return 0;
}

//Ex 3.22
//Revise the loop that printed the first parapgrah in text to instead change the element in text that correspond to the first paragraph to all uppercase.
//After you've updated text, print its contents.

//Write a program to create a vector with ten int element. Using an iterator, assign each element value that is twice its current value.
Test your program by printing the vector.
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
    vector <int> v {1,2,3,4,5,6,7,8,9,10};
    for (auto i = v.begin(); i < v.end();++i){
   // for each element in v (note : i is a reference)
        *i = 2 * *i;
    }
    for (auto i : v) // for each element in v
    cout << i << " "; // print the element
    cout << endl;

   return 0;
}

Exercises Section 3.4.2
//Ex 3.24
//Redo the last exercise from 3.3.3 using iterator.
//Same as 3.21

//Ex 3.25
//Rewrite the grade clustering program from using iterator instead of subscripts.

vector <int> scores(11,0); // 11 buckets, all initially 0
int grade;
while (cin >>  grade){
    if (grade <= 100){
      ++scores[grade/10];
     }
}

//Exercise 3.26
//In the binary search program on page 112, why did we write mid = beg + (end - beg) / 2;
//Instead of mid = (beg + end) / 2;

Answer : To avoid beg and end have too larger integers, adding they up can reach to the maximize integer size and become negative.

Exercises Section 3.5.1
//Ex 3.27
//Assuming txt_size is a function that takes no arguments and returns an int value.
//Which of the following definitions are illegal? Explain why.

unsigned buf_size = 1024;
(a) int ia[buf_size]; // illegal, the dimension valye must be a constant expression.
(b) int ia[4 * 7 - 14];
(c) int ia[txt_size()];  //illegal, the dimension value must be a constant expression.
(d) char st[11] = "fundamental"; // string size is 12

//Ex 3.28
//What are the values in the following arrays?

string sa[10] // empty strings
int ia[10]; // It need to be initialze.
int main() {
  string sa2[10]; // empty strings;
  int ia2[10]; // It need to be initialze.
 }
 
 //Ex 3.29
 //List some of the drawback of using an array instead of a vector.
 
3.3.1
//It could use array
int i [] = {1,2,3,4,5,6,7,8,9,10};

for (int j = 0; j < i.size(); ++j){
    cout << i;
}
    cout << endl;

Exercise Section 3.5.2
//Ex 3.30
//Identify the indexing errors in the following code:

constexpr size_t array size = 10;
int ia[array_size];
for (size_t ix = 1; ix <= array_size; ++ix)
  ia[ix] = ix; // There's no index ia[10], because we have an array_size of 10, from 0 - 9. Index out of range.
